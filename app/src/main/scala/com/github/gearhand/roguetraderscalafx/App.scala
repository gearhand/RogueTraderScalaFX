/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package com.github.gearhand.roguetraderscalafx

import com.github.gearhand.roguetraderscalafx.MyYamlProtocol._
import com.github.gearhand.roguetraderscalafx.Race.Imperium
import net.jcazevedo.moultingyaml._

import scala.io.{Codec, Source}
import scalafx.application.JFXApp3
import scalafx.beans.property.IntegerProperty
import scalafx.collections.ObservableBuffer
import scalafx.geometry.Insets
import scalafx.geometry.Pos.Center
import scalafx.scene.Scene
import scalafx.scene.control.{Button, ChoiceBox, Label, TextField}
import scalafx.scene.layout.{Border, BorderPane, BorderStroke, BorderStrokeStyle, BorderWidths, CornerRadii, GridPane}
import scalafx.scene.paint.Color.Red

import scala.io.Source.fromInputStream

/**
 * План приложения:
 * выберите расу, корпус и введите доступные очки корабля →
 * сгенерить корабль, кастомизировать.
 * Где-нибудь в начале или в верхней менюшке в меню настроек сделать выбор пресета
 */
object App extends JFXApp3 {

  def greeting(): String = "Hello, world!"

  override def start(): Unit = {
    stage = new JFXApp3.PrimaryStage {

      implicit val codec = Codec.UTF8
      val yamlString = (path:String) => fromInputStream(getClass.getResourceAsStream(path)).mkString.parseYaml

      val hullsCatalog = mapFormat(RaceFormat, immSeqFormat(hullFormat(ArtilleryCellStructure)))
        .read(yamlString("/hulls.yml"))
        .map(v => (v._1, v._2.sortBy(_.cost).reverse))

      val artCatalog = immSeqFormat(ArtilleryFormat) read yamlString("/artillery.yml")
      val essentialsCatalog = EssentialsCatalogFormat read yamlString("/essentials.yml")
      val supplementalsCatalog = immSeqFormat(supplementalFormat) read yamlString("/supplemental.yml")

      scene = new Scene {
        val raceChoice = new ChoiceBox(ObservableBuffer.from(Race.values)) {
          value = Race.Imperium
        }
        val hullChoice = new ChoiceBox(ObservableBuffer.from(HullType.values)) {
          value = HullType.Transport
        }
        val shipPoints = new TextField {
          maxWidth = 30
          alignment = Center

          text.onChange { (_, _, newVal) =>
            newVal.toIntOption match {
              case v@Some(value) =>
                parsePoints = v
                border.update(defBorder)
              case None => border.update(redBorder)
            }
          }

          val defBorder = Border.Empty
          val redBorder = {
            //val strokes = defBorder.getStrokes.get(0)
            new Border(new BorderStroke(Red, BorderStrokeStyle.Solid, CornerRadii.Empty, BorderWidths.Default))
          }
          var parsePoints: Option[Int] = None
        }


        val advancedButton = new Button("Advanced options")

        val inputGrid = new GridPane {
          add(new Label("Выбор расы:"), 0,0)
          add(
            raceChoice, 1,0)
          add(new Label("Выбор корпуса:"), 0,1)
          add(
            hullChoice, 1,1)
          add(new Label("Очки корабля:"), 0,2)
          add(shipPoints, 1,2)
          add(advancedButton, 0, 3, 2, 1)
        }

        val genButton = new Button("Generate") {
          onAction = _ => {
            //shipPoints.text.value.toIntOption.map { points =>
            //  Algorithms.generate(
            //    hullChoice.getValue,
            //    points, // TODO: Needs error handling!
            //    hullsCatalog(Imperium),
            //    essentialsCatalog,
            //    artCatalog,
            //    supplementalsCatalog,
            //    null
            //  )
            //}
            for {
              points <- shipPoints.text.value.toIntOption
            } yield {
              println("Call to generate")
              Algorithms.generate(
                hullChoice.getValue,
                points, // TODO: Needs error handling!
                hullsCatalog(Imperium),
                essentialsCatalog,
                artCatalog,
                supplementalsCatalog,
                null
              )
            }
          }
        }

        root = new BorderPane {
          center = inputGrid
          right = new BorderPane { bottom = genButton; padding = Insets(2); }
        }
      }
    }
  }

  def example = new BorderPane {
    padding = Insets(25)
    val source = Source.fromFile("app/src/main/resources/essentials.yml", "utf-8")
    val yamlAst = try
      EssentialsCatalogFormat.read(source.getLines().mkString("\n").parseYaml)
    finally source.close()
    //center = new Label("Hello SBT")
    center = new Label(yamlAst.drive.toYaml(driveListFormat).prettyPrint)

    // Property
    val speed: IntegerProperty = IntegerProperty(0)
    speed.onChange { (source, old, new_val) =>
      println(s"Value of property '$source.name' is changing from $old to $new_val")
    }
    speed.value = 10
  }



  def foo = {
    new BorderPane {
      padding = Insets(25)
      val source = Source.fromFile("app/src/main/resources/essentials.yml", "utf-8")
      val yamlAst = try
        EssentialsCatalogFormat.read(source.getLines().mkString("\n").parseYaml)
      finally source.close()
      //center = new Label("Hello SBT")
      center = new Label(yamlAst.drive.toYaml(driveListFormat).prettyPrint)
    }
  }
}
