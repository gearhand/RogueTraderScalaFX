/*
 * This Scala Testsuite was generated by the Gradle 'init' task.
 */
package com.github.gearhand.roguetraderscalafx

import com.github.gearhand.roguetraderscalafx.Artillery.{createArtCells, createBattery, createLance}
import com.github.gearhand.roguetraderscalafx.ArtillerySlot.{Forward, LeftBoard, RightBoard}
import com.github.gearhand.roguetraderscalafx.HullType.Transport
import com.github.gearhand.roguetraderscalafx.MyYamlProtocol._
import net.jcazevedo.moultingyaml._
import org.scalatest.funsuite.AnyFunSuite
import org.junit.runner.RunWith
import org.scalatestplus.junit.JUnitRunner
import com.github.gearhand.roguetraderscalafx.Algorithms.Int3

import scala.io._

@RunWith(classOf[JUnitRunner])
class AppSuite extends AnyFunSuite {
  def exampleHull: Hull = {
    Hull(
      "Jerico",
      Transport,
      3, -10, 5, 50, 12, 1, 45, 20,
      createArtCells(List((Forward, 1), (LeftBoard, 1), (RightBoard, 1))),
      "Грузовое судно"
    )
   }

  test("App has a greeting") {
    assert(App.greeting() != null)
  }

  test("Components deserialization") {

    println(System.getProperty("user.dir"))
    val source = Source.fromFile("src/main/resources/essentials.yml", "utf-8")
    val catalog = try
      EssentialsCatalogFormat.read(source.getLines().mkString("\n").parseYaml)
      finally source.close()

    assert(catalog.drive.exists { x =>
      x.stats.name.equals("Jovian Pattern Class 1 Drive") && x.stats.hulls.contains(HullType.Transport)
    })
  }

  test("Artillery addition") {

    val hull = exampleHull
    val lance = createLance("TestLance", Set(Transport), 1, 1, 1, 1, "1k10", 1, 1, None)
    val boardGun = createBattery("TestBoard", Set(Transport), 1, 1, 1, 1, "1k10", 1, 1, Some(Set(LeftBoard, RightBoard)))
    val regular = createBattery("TestRegular", Set(Transport), 1, 1, 1, 1, "1k10", 1, 1, None)

    assertResult(Right("OK")) (hull.addArt(boardGun))
    assertResult(Right("OK")) (hull.addArt(regular))
    assertResult(Left("Cannot add")) (hull.addArt(lance))
    assertResult(ArtilleryCell(Forward, Some(regular)))(hull.artilleryCells.head)
    assertResult(ArtilleryCell(LeftBoard, Some(boardGun)))(hull.artilleryCells(1))
    assertResult(ArtilleryCell(RightBoard, None))(hull.artilleryCells(2))
  }

  test("Artillery addition -- positive lance") {

    val hull = exampleHull
    val lance = createLance("TestLance", Set(Transport), 1, 1, 1, 1, "1k10", 1, 1, None)
    val boardGun = createBattery("TestBoard", Set(Transport), 1, 1, 1, 1, "1k10", 1, 1, Some(Set(LeftBoard, RightBoard)))
    val regular = createBattery("TestRegular", Set(Transport), 1, 1, 1, 1, "1k10", 1, 1, None)

    assertResult(Right("OK")) (hull.addArt(boardGun))
    assertResult(Right("OK")) (hull.addArt(lance))
    assertResult(Right("OK")) (hull.addArt(regular))
    assertResult(ArtilleryCell(Forward, Some(lance)))(hull.artilleryCells.head)
    assertResult(ArtilleryCell(LeftBoard, Some(boardGun)))(hull.artilleryCells(1))
    assertResult(ArtilleryCell(RightBoard, Some(regular)))(hull.artilleryCells(2))
  }

  test("Set of artillery") {
    val start: Set[Artillery] = Set(
      createLance("TestLance", Set(Transport), 1, 1, 1, 1, "1k10", 1, 1, None),
      createBattery("TestBoard", Set(Transport), 1, 1, 1, 1, "1k10", 1, 1, Some(Set(LeftBoard, RightBoard))),
    )
    val updated = start.incl(
      createBattery("TestRegular", Set(Transport), 1, 1, 1, 1, "1k10", 1, 1, None)
    )
    assert(updated.size == 3)
  }

  test("Random 1") {
    println(System.getProperty("user.dir"))
    val source = Source.fromFile("src/main/resources/essentials.yml", "utf-8")
    val catalog = try
      EssentialsCatalogFormat.read(source.getLines().mkString("\n").parseYaml)
    finally source.close()
    val ship = Algorithms.randomEssentialVector(exampleHull.hullType, catalog)
    println(ship.toYaml.prettyPrint)
  }

  test("Artillery addition via function") {
    val hull = exampleHull
    val lance = createLance("TestLance", Set(Transport), 1, 1, 1, 1, "1k10", 1, 1, None)
    val boardGun = createBattery("TestBoard", Set(Transport), 1, 1, 1, 1, "1k10", 1, 1, Some(Set(LeftBoard, RightBoard)))
    val regular = createBattery("TestRegular", Set(Transport), 1, 1, 1, 1, "1k10", 1, 1, None)
    val catalog = List(lance, boardGun, regular)

    Algorithms.fillArtillery(hull, catalog)
    println(hull.toYaml.prettyPrint)

  }

  test("Limited supplementals") {
    val hull = exampleHull
    val source = Source.fromFile("src/main/resources/supplemental.yml", "utf-8")
    val catalog = try
      seqFormat[Supplemental].read(source.getLines().mkString("\n").parseYaml)
    finally source.close()

    val supp = Algorithms.fillSupplementals((5,5,5), Transport, catalog.toSeq)
    println("Total cost: " + supp.map(_.score).reduce(_ + _))
    println(supp.toIndexedSeq.toYaml.prettyPrint)
  }
}
